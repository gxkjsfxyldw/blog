{"remainingRequest":"D:\\MyBlog\\Myblog-vue\\node_modules\\babel-loader\\lib\\index.js!D:\\MyBlog\\Myblog-vue\\src\\request\\index.js","dependencies":[{"path":"D:\\MyBlog\\Myblog-vue\\src\\request\\index.js","mtime":1664860302930},{"path":"D:\\MyBlog\\Myblog-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662220380556},{"path":"D:\\MyBlog\\Myblog-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1662220387677}],"contextDependencies":[],"result":["import axios from \"axios\";\nvar service = axios.create({\n  //将端口进行映射，这样在其他地方只需要引用就可以了  服务器地址 http://101.34.23.203:9090\n  baseURL: \"http://localhost:8888\",\n  // baseURL:\"http://101.34.23.203:9090\",\n  timeout: 10000\n}); //将此方法声明为公开，让其他组件可以访问到\n\nexport default service; //拦截器\n\nimport store from '@/store';\nimport { Message } from \"element-ui\"; //添加请求拦截器\n\nservice.interceptors.request.use(function (config) {\n  //    在发送请求前做些什么\n  if (store.state.token) {\n    //判断token是否存在\n    //添加一个请求头为token，只要是登录就有，根据请求头就可以获取token,发起任何请求都会添加token\n    config.headers['Authorization'] = localStorage.token;\n  }\n\n  return config;\n}, function (error) {\n  //    对请求错误做点什么\n  return Promise.reject(error);\n}); //添加相应拦截器\n\nservice.interceptors.response.use(function (response) {\n  //    对响应数据做点什么\n  var res = response.data; //    0为成功状态\n\n  if (res !== 200) {\n    //  未登录\n    if (res.code === 90002) {\n      Message({\n        type: 'warning',\n        showClose: true,\n        message: '未登录或登录超时，请重新登录'\n      });\n      return Promise.reject('error');\n    }\n  }\n\n  return response;\n});",{"version":3,"sources":["D:\\MyBlog\\Myblog-vue\\src\\request\\index.js"],"names":["axios","service","create","baseURL","timeout","store","Message","interceptors","request","use","config","state","token","headers","localStorage","error","Promise","reject","response","res","data","code","type","showClose","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,IAAMC,OAAO,GAACD,KAAK,CAACE,MAAN,CAAa;AACvB;AACFC,EAAAA,OAAO,EAAC,uBAFiB;AAGtB;AACDC,EAAAA,OAAO,EAAC;AAJe,CAAb,CAAd,C,CAMA;;AACA,eAAeH,OAAf,C,CAEA;;AACA,OAAOI,KAAP,MAAkB,SAAlB;AACA,SAAQC,OAAR,QAAsB,YAAtB,C,CAEA;;AACAL,OAAO,CAACM,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CAAiC,UAAUC,MAAV,EAAiB;AAClD;AACI,MAAGL,KAAK,CAACM,KAAN,CAAYC,KAAf,EAAqB;AAAC;AAClB;AACAF,IAAAA,MAAM,CAACG,OAAP,CAAe,eAAf,IAAgCC,YAAY,CAACF,KAA7C;AACH;;AACD,SAAOF,MAAP;AACH,CAPD,EAOE,UAAUK,KAAV,EAAgB;AAClB;AACI,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAVD,E,CAWA;;AACAd,OAAO,CAACM,YAAR,CAAqBW,QAArB,CAA8BT,GAA9B,CAAkC,UAAUS,QAAV,EAAmB;AACrD;AACI,MAAMC,GAAG,GAACD,QAAQ,CAACE,IAAnB,CAFiD,CAGrD;;AACI,MAAGD,GAAG,KAAG,GAAT,EAAa;AACb;AACI,QAAGA,GAAG,CAACE,IAAJ,KAAW,KAAd,EAAoB;AAChBf,MAAAA,OAAO,CAAC;AACJgB,QAAAA,IAAI,EAAC,SADD;AAEJC,QAAAA,SAAS,EAAC,IAFN;AAGJC,QAAAA,OAAO,EAAC;AAHJ,OAAD,CAAP;AAKA,aAAOR,OAAO,CAACC,MAAR,CAAe,OAAf,CAAP;AACH;AACJ;;AACD,SAAOC,QAAP;AACH,CAhBD","sourcesContent":["import axios from \"axios\";\r\nconst service=axios.create({\r\n    //将端口进行映射，这样在其他地方只需要引用就可以了  服务器地址 http://101.34.23.203:9090\r\n\t baseURL:\"http://localhost:8888\",\r\n     // baseURL:\"http://101.34.23.203:9090\",\r\n    timeout:10000\r\n})\r\n//将此方法声明为公开，让其他组件可以访问到\r\nexport default service;\r\n\r\n//拦截器\r\nimport store from '@/store'\r\nimport {Message} from \"element-ui\";\r\n\r\n//添加请求拦截器\r\nservice.interceptors.request.use(function (config){\r\n//    在发送请求前做些什么\r\n    if(store.state.token){//判断token是否存在\r\n        //添加一个请求头为token，只要是登录就有，根据请求头就可以获取token,发起任何请求都会添加token\r\n        config.headers['Authorization']=localStorage.token\r\n    }\r\n    return config;\r\n},function (error){\r\n//    对请求错误做点什么\r\n    return Promise.reject(error)\r\n});\r\n//添加相应拦截器\r\nservice.interceptors.response.use(function (response){\r\n//    对响应数据做点什么\r\n    const res=response.data;\r\n//    0为成功状态\r\n    if(res!==200){\r\n    //  未登录\r\n        if(res.code===90002){\r\n            Message({\r\n                type:'warning',\r\n                showClose:true,\r\n                message:'未登录或登录超时，请重新登录'\r\n            })\r\n            return Promise.reject('error');\r\n        }\r\n    }\r\n    return response;\r\n})\r\n"]}]}