{"remainingRequest":"D:\\MyBlog\\Myblog-vue\\node_modules\\babel-loader\\lib\\index.js!D:\\MyBlog\\Myblog-vue\\src\\store\\index.js","dependencies":[{"path":"D:\\MyBlog\\Myblog-vue\\src\\store\\index.js","mtime":1663257764176},{"path":"D:\\MyBlog\\Myblog-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662220380556},{"path":"D:\\MyBlog\\Myblog-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1662220387677}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport Vue from \"vue\";\nimport Vuex from 'vuex';\nimport { register as _register, getUserInfo as _getUserInfo, logout as _logout, login as _login } from '@/api/register';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  //需要记录的状态信息\n  state: {\n    id: '',\n    account: '',\n    name: '',\n    avatar: '',\n    token: localStorage.token\n  },\n  mutations: {\n    SET_TOKEN: function SET_TOKEN(state, token) {\n      state.token = token;\n    },\n    SET_ACCOUNT: function SET_ACCOUNT(state, account) {\n      state.account = account;\n    },\n    SET_NAME: function SET_NAME(state, name) {\n      state.name = name;\n    },\n    SET_AVATAR: function SET_AVATAR(state, avatar) {\n      state.avatar = avatar;\n    },\n    SET_ID: function SET_ID(state, id) {\n      state.id = id;\n    }\n  },\n  actions: {\n    register: function register(_ref, user) {\n      var commit = _ref.commit;\n      //这个表示自带参数commit，外加传入一个user对象参数\n      //Promise对象代表了未来将要发生的事件，用来传递早步操作的消息。\n      //rejected：意味着操作失败。\n      return new Promise(function (resolve, reject) {\n        //异步处理\n        //处理结束后调resolve 或 reject\n        // 当异步代码执行成功时，我们才会调resolve（..…），当异步代码关败时就会调用reject(...)\n        _register(user).then(function (res) {\n          //请求后端接口\n          //user就是后端的登录用户\n          //判断是否注册成功\n          if (res.data.success) {\n            //获取到后端的token\n            commit('SET_TOKEN', res.data.data); //将后端传的token存储到本地\n\n            localStorage.token = res.data.data;\n            resolve();\n          } else {\n            reject(res.data.msg);\n          }\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    getUserInfo: function getUserInfo(_ref2) {\n      var commit = _ref2.commit;\n      //这个表示自带参数commit，\n      //Promise对象代表了未来将要发生的事件，用来传递早步操作的消息。\n      //rejected：意味着操作失败。\n      return new Promise(function (resolve, reject) {\n        //异步处理\n        //处理结束后调resolve 或 reject\n        // 当异步代码执行成功时，我们才会调resolve（..…），当异步代码关败时就会调用reject(...)\n        _getUserInfo().then(function (res) {\n          //请求后端接口\n          //user就是后端的登录用户\n          //判断是否注册成功\n          if (res.data.success) {\n            //将后端获取到的用户信息进行赋值\n            commit('SET_ID', res.data.data.id);\n            commit('SET_ACCOUNT', res.data.data.account);\n            commit('SET_NAME', res.data.data.name);\n            commit('SET_AVATAR', res.data.data.avatar);\n            resolve(res.data); //下一步的操作需要用户信息\n          } else {\n            //获取失败就将值赋值为空\n            commit('SET_TOKEN', '');\n            commit('SET_ID', '');\n            commit('SET_ACCOUNT', '');\n            commit('SET_NAME', '');\n            commit('SET_AVATAR', '');\n            localStorage.removeItem(\"token\"); //将token清除\n\n            reject(res.data.msg);\n          }\n        }).catch(function (error) {\n          //获取失败就将值赋值为空\n          commit('SET_TOKEN', '');\n          commit('SET_ID', '');\n          commit('SET_ACCOUNT', '');\n          commit('SET_NAME', '');\n          commit('SET_AVATAR', '');\n          localStorage.removeItem(\"token\"); //将token清除\n\n          reject(error);\n        });\n      });\n    },\n    //登录\n    login: function login(_ref3, user) {\n      var commit = _ref3.commit;\n      //这个表示自带参数commit\n      //Promise对象代表了未来将要发生的事件，用来传递早步操作的消息。\n      //rejected：意味着操作失败。\n      return new Promise(function (resolve, reject) {\n        //异步处理\n        //处理结束后调resolve 或 reject\n        // 当异步代码执行成功时，我们才会调resolve（..…），当异步代码关败时就会调用reject(...)\n        _login(user).then(function (res) {\n          //请求后端接口\n          //user就是后端的登录用户\n          //判断是否登录成功\n          if (res.data.success) {\n            //获取到后端的token\n            commit('SET_TOKEN', res.data.data); //将后端传的token存储到本地\n\n            localStorage.token = res.data.data;\n            resolve();\n          } else {\n            reject(res.data.msg);\n          }\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    //退出登录\n    logout: function logout(_ref4) {\n      var commit = _ref4.commit;\n      //这个表示自带参数commit\n      //Promise对象代表了未来将要发生的事件，用来传递早步操作的消息。\n      //rejected：意味着操作失败。\n      return new Promise(function (resolve, reject) {\n        //异步处理\n        //处理结束后调resolve 或 reject\n        // 当异步代码执行成功时，我们才会调resolve（..…），当异步代码关败时就会调用reject(...)\n        _logout().then(function (res) {\n          //请求后端接口\n          //user就是后端的登录用户\n          //判断是否注册成功\n          if (res.data.success) {\n            //获取失败就将值赋值为空\n            commit('SET_TOKEN', '');\n            commit('SET_ID', '');\n            commit('SET_ACCOUNT', '');\n            commit('SET_NAME', '');\n            commit('SET_AVATAR', '');\n            localStorage.removeItem(\"token\"); //将token清除\n\n            resolve();\n          } else {\n            reject(res.data.msg);\n          }\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n  }\n});",{"version":3,"sources":["D:\\MyBlog\\Myblog-vue\\src\\store\\index.js"],"names":["Vue","Vuex","register","getUserInfo","logout","login","use","Store","state","id","account","name","avatar","token","localStorage","mutations","SET_TOKEN","SET_ACCOUNT","SET_NAME","SET_AVATAR","SET_ID","actions","user","commit","Promise","resolve","reject","then","res","data","success","msg","catch","error","removeItem"],"mappings":"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","sourcesContent":["import Vue from \"vue\";\r\nimport Vuex from 'vuex'\r\nimport {register,getUserInfo,logout,login} from '@/api/register'\r\n\r\nVue.use(Vuex)\r\nexport default new Vuex.Store({\r\n    //需要记录的状态信息\r\n    state:{\r\n        id:'',\r\n        account:'',\r\n        name:'',\r\n        avatar:'',\r\n        token:localStorage.token,\r\n    },\r\n    mutations:{\r\n        SET_TOKEN:(state,token)=>{\r\n            state.token=token;\r\n        },\r\n        SET_ACCOUNT:(state,account)=>{\r\n            state.account=account;\r\n        },\r\n        SET_NAME:(state,name)=>{\r\n            state.name=name;\r\n        },\r\n        SET_AVATAR:(state,avatar)=>{\r\n            state.avatar=avatar;\r\n        },\r\n        SET_ID:(state,id)=>{\r\n            state.id=id;\r\n        },\r\n    },\r\n    actions:{\r\n        register({commit},user){//这个表示自带参数commit，外加传入一个user对象参数\r\n            //Promise对象代表了未来将要发生的事件，用来传递早步操作的消息。\r\n            //rejected：意味着操作失败。\r\n            return new Promise((resolve,reject)=>{\r\n                //异步处理\r\n                //处理结束后调resolve 或 reject\r\n                // 当异步代码执行成功时，我们才会调resolve（..…），当异步代码关败时就会调用reject(...)\r\n                register(user).then((res)=>{//请求后端接口\r\n                    //user就是后端的登录用户\r\n                    //判断是否注册成功\r\n                    if(res.data.success){\r\n                        //获取到后端的token\r\n                        commit('SET_TOKEN',res.data.data)\r\n                        //将后端传的token存储到本地\r\n                        localStorage.token=res.data.data\r\n                        resolve()\r\n                    }else{\r\n                        reject(res.data.msg)\r\n                    }\r\n                }).catch((error)=>{\r\n                    reject(error)\r\n                })\r\n            })\r\n        },\r\n        getUserInfo({commit}){//这个表示自带参数commit，\r\n            //Promise对象代表了未来将要发生的事件，用来传递早步操作的消息。\r\n            //rejected：意味着操作失败。\r\n            return new Promise((resolve,reject)=>{\r\n                //异步处理\r\n                //处理结束后调resolve 或 reject\r\n                // 当异步代码执行成功时，我们才会调resolve（..…），当异步代码关败时就会调用reject(...)\r\n                getUserInfo().then((res)=>{//请求后端接口\r\n                    //user就是后端的登录用户\r\n                    //判断是否注册成功\r\n                    if(res.data.success){\r\n                        //将后端获取到的用户信息进行赋值\r\n                        commit('SET_ID',res.data.data.id);\r\n                        commit('SET_ACCOUNT',res.data.data.account);\r\n                        commit('SET_NAME',res.data.data.name);\r\n                        commit('SET_AVATAR',res.data.data.avatar);\r\n                        resolve(res.data)//下一步的操作需要用户信息\r\n                    }else{\r\n                        //获取失败就将值赋值为空\r\n                        commit('SET_TOKEN','');\r\n                        commit('SET_ID','');\r\n                        commit('SET_ACCOUNT','');\r\n                        commit('SET_NAME','');\r\n                        commit('SET_AVATAR','');\r\n                        localStorage.removeItem(\"token\") //将token清除\r\n                        reject(res.data.msg)\r\n                    }\r\n                }).catch((error)=>{\r\n                    //获取失败就将值赋值为空\r\n                    commit('SET_TOKEN','');\r\n                    commit('SET_ID','');\r\n                    commit('SET_ACCOUNT','');\r\n                    commit('SET_NAME','');\r\n                    commit('SET_AVATAR','');\r\n                    localStorage.removeItem(\"token\") //将token清除\r\n                    reject(error)\r\n                })\r\n            })\r\n        },\r\n        //登录\r\n        login({commit},user){//这个表示自带参数commit\r\n            //Promise对象代表了未来将要发生的事件，用来传递早步操作的消息。\r\n            //rejected：意味着操作失败。\r\n            return new Promise((resolve,reject)=>{\r\n                //异步处理\r\n                //处理结束后调resolve 或 reject\r\n                // 当异步代码执行成功时，我们才会调resolve（..…），当异步代码关败时就会调用reject(...)\r\n                login(user).then((res)=>{//请求后端接口\r\n                    //user就是后端的登录用户\r\n                    //判断是否登录成功\r\n                    if(res.data.success){\r\n                        //获取到后端的token\r\n                        commit('SET_TOKEN',res.data.data)\r\n                        //将后端传的token存储到本地\r\n                        localStorage.token=res.data.data;\r\n                        resolve()\r\n                    }else{\r\n                        reject(res.data.msg)\r\n                    }\r\n                }).catch((error)=>{\r\n                    reject(error)\r\n                })\r\n            })\r\n        },\r\n        //退出登录\r\n        logout({commit}){//这个表示自带参数commit\r\n            //Promise对象代表了未来将要发生的事件，用来传递早步操作的消息。\r\n            //rejected：意味着操作失败。\r\n            return new Promise((resolve,reject)=>{\r\n                //异步处理\r\n                //处理结束后调resolve 或 reject\r\n                // 当异步代码执行成功时，我们才会调resolve（..…），当异步代码关败时就会调用reject(...)\r\n                logout().then((res)=>{//请求后端接口\r\n                    //user就是后端的登录用户\r\n                    //判断是否注册成功\r\n                    if(res.data.success){\r\n                        //获取失败就将值赋值为空\r\n                        commit('SET_TOKEN','');\r\n                        commit('SET_ID','');\r\n                        commit('SET_ACCOUNT','');\r\n                        commit('SET_NAME','');\r\n                        commit('SET_AVATAR','');\r\n                        localStorage.removeItem(\"token\") //将token清除\r\n                        resolve()\r\n                    }else{\r\n                        reject(res.data.msg)\r\n                    }\r\n                }).catch((error)=>{\r\n                    reject(error)\r\n                })\r\n            })\r\n        },\r\n    }\r\n})\r\n"]}]}